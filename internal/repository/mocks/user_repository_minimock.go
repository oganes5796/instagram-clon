// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/oganes5796/instagram-clon/internal/repository.UserRepository -o user_repository_minimock.go -n UserRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/oganes5796/instagram-clon/internal/domain"
)

// UserRepositoryMock implements mm_repository.UserRepository
type UserRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetUser          func(ctx context.Context, username string, password string) (up1 *domain.User, err error)
	funcGetUserOrigin    string
	inspectFuncGetUser   func(ctx context.Context, username string, password string)
	afterGetUserCounter  uint64
	beforeGetUserCounter uint64
	GetUserMock          mUserRepositoryMockGetUser

	funcRegister          func(ctx context.Context, user *domain.UserInfo) (i1 int64, err error)
	funcRegisterOrigin    string
	inspectFuncRegister   func(ctx context.Context, user *domain.UserInfo)
	afterRegisterCounter  uint64
	beforeRegisterCounter uint64
	RegisterMock          mUserRepositoryMockRegister
}

// NewUserRepositoryMock returns a mock for mm_repository.UserRepository
func NewUserRepositoryMock(t minimock.Tester) *UserRepositoryMock {
	m := &UserRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetUserMock = mUserRepositoryMockGetUser{mock: m}
	m.GetUserMock.callArgs = []*UserRepositoryMockGetUserParams{}

	m.RegisterMock = mUserRepositoryMockRegister{mock: m}
	m.RegisterMock.callArgs = []*UserRepositoryMockRegisterParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserRepositoryMockGetUser struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockGetUserExpectation
	expectations       []*UserRepositoryMockGetUserExpectation

	callArgs []*UserRepositoryMockGetUserParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserRepositoryMockGetUserExpectation specifies expectation struct of the UserRepository.GetUser
type UserRepositoryMockGetUserExpectation struct {
	mock               *UserRepositoryMock
	params             *UserRepositoryMockGetUserParams
	paramPtrs          *UserRepositoryMockGetUserParamPtrs
	expectationOrigins UserRepositoryMockGetUserExpectationOrigins
	results            *UserRepositoryMockGetUserResults
	returnOrigin       string
	Counter            uint64
}

// UserRepositoryMockGetUserParams contains parameters of the UserRepository.GetUser
type UserRepositoryMockGetUserParams struct {
	ctx      context.Context
	username string
	password string
}

// UserRepositoryMockGetUserParamPtrs contains pointers to parameters of the UserRepository.GetUser
type UserRepositoryMockGetUserParamPtrs struct {
	ctx      *context.Context
	username *string
	password *string
}

// UserRepositoryMockGetUserResults contains results of the UserRepository.GetUser
type UserRepositoryMockGetUserResults struct {
	up1 *domain.User
	err error
}

// UserRepositoryMockGetUserOrigins contains origins of expectations of the UserRepository.GetUser
type UserRepositoryMockGetUserExpectationOrigins struct {
	origin         string
	originCtx      string
	originUsername string
	originPassword string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUser *mUserRepositoryMockGetUser) Optional() *mUserRepositoryMockGetUser {
	mmGetUser.optional = true
	return mmGetUser
}

// Expect sets up expected params for UserRepository.GetUser
func (mmGetUser *mUserRepositoryMockGetUser) Expect(ctx context.Context, username string, password string) *mUserRepositoryMockGetUser {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserRepositoryMockGetUserExpectation{}
	}

	if mmGetUser.defaultExpectation.paramPtrs != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by ExpectParams functions")
	}

	mmGetUser.defaultExpectation.params = &UserRepositoryMockGetUserParams{ctx, username, password}
	mmGetUser.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetUser.expectations {
		if minimock.Equal(e.params, mmGetUser.defaultExpectation.params) {
			mmGetUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUser.defaultExpectation.params)
		}
	}

	return mmGetUser
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.GetUser
func (mmGetUser *mUserRepositoryMockGetUser) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockGetUser {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserRepositoryMockGetUserExpectation{}
	}

	if mmGetUser.defaultExpectation.params != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Expect")
	}

	if mmGetUser.defaultExpectation.paramPtrs == nil {
		mmGetUser.defaultExpectation.paramPtrs = &UserRepositoryMockGetUserParamPtrs{}
	}
	mmGetUser.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetUser.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetUser
}

// ExpectUsernameParam2 sets up expected param username for UserRepository.GetUser
func (mmGetUser *mUserRepositoryMockGetUser) ExpectUsernameParam2(username string) *mUserRepositoryMockGetUser {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserRepositoryMockGetUserExpectation{}
	}

	if mmGetUser.defaultExpectation.params != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Expect")
	}

	if mmGetUser.defaultExpectation.paramPtrs == nil {
		mmGetUser.defaultExpectation.paramPtrs = &UserRepositoryMockGetUserParamPtrs{}
	}
	mmGetUser.defaultExpectation.paramPtrs.username = &username
	mmGetUser.defaultExpectation.expectationOrigins.originUsername = minimock.CallerInfo(1)

	return mmGetUser
}

// ExpectPasswordParam3 sets up expected param password for UserRepository.GetUser
func (mmGetUser *mUserRepositoryMockGetUser) ExpectPasswordParam3(password string) *mUserRepositoryMockGetUser {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserRepositoryMockGetUserExpectation{}
	}

	if mmGetUser.defaultExpectation.params != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Expect")
	}

	if mmGetUser.defaultExpectation.paramPtrs == nil {
		mmGetUser.defaultExpectation.paramPtrs = &UserRepositoryMockGetUserParamPtrs{}
	}
	mmGetUser.defaultExpectation.paramPtrs.password = &password
	mmGetUser.defaultExpectation.expectationOrigins.originPassword = minimock.CallerInfo(1)

	return mmGetUser
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.GetUser
func (mmGetUser *mUserRepositoryMockGetUser) Inspect(f func(ctx context.Context, username string, password string)) *mUserRepositoryMockGetUser {
	if mmGetUser.mock.inspectFuncGetUser != nil {
		mmGetUser.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.GetUser")
	}

	mmGetUser.mock.inspectFuncGetUser = f

	return mmGetUser
}

// Return sets up results that will be returned by UserRepository.GetUser
func (mmGetUser *mUserRepositoryMockGetUser) Return(up1 *domain.User, err error) *UserRepositoryMock {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserRepositoryMockGetUserExpectation{mock: mmGetUser.mock}
	}
	mmGetUser.defaultExpectation.results = &UserRepositoryMockGetUserResults{up1, err}
	mmGetUser.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetUser.mock
}

// Set uses given function f to mock the UserRepository.GetUser method
func (mmGetUser *mUserRepositoryMockGetUser) Set(f func(ctx context.Context, username string, password string) (up1 *domain.User, err error)) *UserRepositoryMock {
	if mmGetUser.defaultExpectation != nil {
		mmGetUser.mock.t.Fatalf("Default expectation is already set for the UserRepository.GetUser method")
	}

	if len(mmGetUser.expectations) > 0 {
		mmGetUser.mock.t.Fatalf("Some expectations are already set for the UserRepository.GetUser method")
	}

	mmGetUser.mock.funcGetUser = f
	mmGetUser.mock.funcGetUserOrigin = minimock.CallerInfo(1)
	return mmGetUser.mock
}

// When sets expectation for the UserRepository.GetUser which will trigger the result defined by the following
// Then helper
func (mmGetUser *mUserRepositoryMockGetUser) When(ctx context.Context, username string, password string) *UserRepositoryMockGetUserExpectation {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Set")
	}

	expectation := &UserRepositoryMockGetUserExpectation{
		mock:               mmGetUser.mock,
		params:             &UserRepositoryMockGetUserParams{ctx, username, password},
		expectationOrigins: UserRepositoryMockGetUserExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetUser.expectations = append(mmGetUser.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.GetUser return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockGetUserExpectation) Then(up1 *domain.User, err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockGetUserResults{up1, err}
	return e.mock
}

// Times sets number of times UserRepository.GetUser should be invoked
func (mmGetUser *mUserRepositoryMockGetUser) Times(n uint64) *mUserRepositoryMockGetUser {
	if n == 0 {
		mmGetUser.mock.t.Fatalf("Times of UserRepositoryMock.GetUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUser.expectedInvocations, n)
	mmGetUser.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetUser
}

func (mmGetUser *mUserRepositoryMockGetUser) invocationsDone() bool {
	if len(mmGetUser.expectations) == 0 && mmGetUser.defaultExpectation == nil && mmGetUser.mock.funcGetUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUser.mock.afterGetUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUser implements mm_repository.UserRepository
func (mmGetUser *UserRepositoryMock) GetUser(ctx context.Context, username string, password string) (up1 *domain.User, err error) {
	mm_atomic.AddUint64(&mmGetUser.beforeGetUserCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUser.afterGetUserCounter, 1)

	mmGetUser.t.Helper()

	if mmGetUser.inspectFuncGetUser != nil {
		mmGetUser.inspectFuncGetUser(ctx, username, password)
	}

	mm_params := UserRepositoryMockGetUserParams{ctx, username, password}

	// Record call args
	mmGetUser.GetUserMock.mutex.Lock()
	mmGetUser.GetUserMock.callArgs = append(mmGetUser.GetUserMock.callArgs, &mm_params)
	mmGetUser.GetUserMock.mutex.Unlock()

	for _, e := range mmGetUser.GetUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetUser.GetUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUser.GetUserMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUser.GetUserMock.defaultExpectation.params
		mm_want_ptrs := mmGetUser.GetUserMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockGetUserParams{ctx, username, password}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetUser.t.Errorf("UserRepositoryMock.GetUser got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUser.GetUserMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.username != nil && !minimock.Equal(*mm_want_ptrs.username, mm_got.username) {
				mmGetUser.t.Errorf("UserRepositoryMock.GetUser got unexpected parameter username, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUser.GetUserMock.defaultExpectation.expectationOrigins.originUsername, *mm_want_ptrs.username, mm_got.username, minimock.Diff(*mm_want_ptrs.username, mm_got.username))
			}

			if mm_want_ptrs.password != nil && !minimock.Equal(*mm_want_ptrs.password, mm_got.password) {
				mmGetUser.t.Errorf("UserRepositoryMock.GetUser got unexpected parameter password, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUser.GetUserMock.defaultExpectation.expectationOrigins.originPassword, *mm_want_ptrs.password, mm_got.password, minimock.Diff(*mm_want_ptrs.password, mm_got.password))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUser.t.Errorf("UserRepositoryMock.GetUser got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetUser.GetUserMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUser.GetUserMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUser.t.Fatal("No results are set for the UserRepositoryMock.GetUser")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetUser.funcGetUser != nil {
		return mmGetUser.funcGetUser(ctx, username, password)
	}
	mmGetUser.t.Fatalf("Unexpected call to UserRepositoryMock.GetUser. %v %v %v", ctx, username, password)
	return
}

// GetUserAfterCounter returns a count of finished UserRepositoryMock.GetUser invocations
func (mmGetUser *UserRepositoryMock) GetUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUser.afterGetUserCounter)
}

// GetUserBeforeCounter returns a count of UserRepositoryMock.GetUser invocations
func (mmGetUser *UserRepositoryMock) GetUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUser.beforeGetUserCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.GetUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUser *mUserRepositoryMockGetUser) Calls() []*UserRepositoryMockGetUserParams {
	mmGetUser.mutex.RLock()

	argCopy := make([]*UserRepositoryMockGetUserParams, len(mmGetUser.callArgs))
	copy(argCopy, mmGetUser.callArgs)

	mmGetUser.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserDone returns true if the count of the GetUser invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockGetUserDone() bool {
	if m.GetUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserMock.invocationsDone()
}

// MinimockGetUserInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockGetUserInspect() {
	for _, e := range m.GetUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.GetUser at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetUserCounter := mm_atomic.LoadUint64(&m.afterGetUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserMock.defaultExpectation != nil && afterGetUserCounter < 1 {
		if m.GetUserMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserRepositoryMock.GetUser at\n%s", m.GetUserMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.GetUser at\n%s with params: %#v", m.GetUserMock.defaultExpectation.expectationOrigins.origin, *m.GetUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUser != nil && afterGetUserCounter < 1 {
		m.t.Errorf("Expected call to UserRepositoryMock.GetUser at\n%s", m.funcGetUserOrigin)
	}

	if !m.GetUserMock.invocationsDone() && afterGetUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.GetUser at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserMock.expectedInvocations), m.GetUserMock.expectedInvocationsOrigin, afterGetUserCounter)
	}
}

type mUserRepositoryMockRegister struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockRegisterExpectation
	expectations       []*UserRepositoryMockRegisterExpectation

	callArgs []*UserRepositoryMockRegisterParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserRepositoryMockRegisterExpectation specifies expectation struct of the UserRepository.Register
type UserRepositoryMockRegisterExpectation struct {
	mock               *UserRepositoryMock
	params             *UserRepositoryMockRegisterParams
	paramPtrs          *UserRepositoryMockRegisterParamPtrs
	expectationOrigins UserRepositoryMockRegisterExpectationOrigins
	results            *UserRepositoryMockRegisterResults
	returnOrigin       string
	Counter            uint64
}

// UserRepositoryMockRegisterParams contains parameters of the UserRepository.Register
type UserRepositoryMockRegisterParams struct {
	ctx  context.Context
	user *domain.UserInfo
}

// UserRepositoryMockRegisterParamPtrs contains pointers to parameters of the UserRepository.Register
type UserRepositoryMockRegisterParamPtrs struct {
	ctx  *context.Context
	user **domain.UserInfo
}

// UserRepositoryMockRegisterResults contains results of the UserRepository.Register
type UserRepositoryMockRegisterResults struct {
	i1  int64
	err error
}

// UserRepositoryMockRegisterOrigins contains origins of expectations of the UserRepository.Register
type UserRepositoryMockRegisterExpectationOrigins struct {
	origin     string
	originCtx  string
	originUser string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRegister *mUserRepositoryMockRegister) Optional() *mUserRepositoryMockRegister {
	mmRegister.optional = true
	return mmRegister
}

// Expect sets up expected params for UserRepository.Register
func (mmRegister *mUserRepositoryMockRegister) Expect(ctx context.Context, user *domain.UserInfo) *mUserRepositoryMockRegister {
	if mmRegister.mock.funcRegister != nil {
		mmRegister.mock.t.Fatalf("UserRepositoryMock.Register mock is already set by Set")
	}

	if mmRegister.defaultExpectation == nil {
		mmRegister.defaultExpectation = &UserRepositoryMockRegisterExpectation{}
	}

	if mmRegister.defaultExpectation.paramPtrs != nil {
		mmRegister.mock.t.Fatalf("UserRepositoryMock.Register mock is already set by ExpectParams functions")
	}

	mmRegister.defaultExpectation.params = &UserRepositoryMockRegisterParams{ctx, user}
	mmRegister.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmRegister.expectations {
		if minimock.Equal(e.params, mmRegister.defaultExpectation.params) {
			mmRegister.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRegister.defaultExpectation.params)
		}
	}

	return mmRegister
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.Register
func (mmRegister *mUserRepositoryMockRegister) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockRegister {
	if mmRegister.mock.funcRegister != nil {
		mmRegister.mock.t.Fatalf("UserRepositoryMock.Register mock is already set by Set")
	}

	if mmRegister.defaultExpectation == nil {
		mmRegister.defaultExpectation = &UserRepositoryMockRegisterExpectation{}
	}

	if mmRegister.defaultExpectation.params != nil {
		mmRegister.mock.t.Fatalf("UserRepositoryMock.Register mock is already set by Expect")
	}

	if mmRegister.defaultExpectation.paramPtrs == nil {
		mmRegister.defaultExpectation.paramPtrs = &UserRepositoryMockRegisterParamPtrs{}
	}
	mmRegister.defaultExpectation.paramPtrs.ctx = &ctx
	mmRegister.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmRegister
}

// ExpectUserParam2 sets up expected param user for UserRepository.Register
func (mmRegister *mUserRepositoryMockRegister) ExpectUserParam2(user *domain.UserInfo) *mUserRepositoryMockRegister {
	if mmRegister.mock.funcRegister != nil {
		mmRegister.mock.t.Fatalf("UserRepositoryMock.Register mock is already set by Set")
	}

	if mmRegister.defaultExpectation == nil {
		mmRegister.defaultExpectation = &UserRepositoryMockRegisterExpectation{}
	}

	if mmRegister.defaultExpectation.params != nil {
		mmRegister.mock.t.Fatalf("UserRepositoryMock.Register mock is already set by Expect")
	}

	if mmRegister.defaultExpectation.paramPtrs == nil {
		mmRegister.defaultExpectation.paramPtrs = &UserRepositoryMockRegisterParamPtrs{}
	}
	mmRegister.defaultExpectation.paramPtrs.user = &user
	mmRegister.defaultExpectation.expectationOrigins.originUser = minimock.CallerInfo(1)

	return mmRegister
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.Register
func (mmRegister *mUserRepositoryMockRegister) Inspect(f func(ctx context.Context, user *domain.UserInfo)) *mUserRepositoryMockRegister {
	if mmRegister.mock.inspectFuncRegister != nil {
		mmRegister.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.Register")
	}

	mmRegister.mock.inspectFuncRegister = f

	return mmRegister
}

// Return sets up results that will be returned by UserRepository.Register
func (mmRegister *mUserRepositoryMockRegister) Return(i1 int64, err error) *UserRepositoryMock {
	if mmRegister.mock.funcRegister != nil {
		mmRegister.mock.t.Fatalf("UserRepositoryMock.Register mock is already set by Set")
	}

	if mmRegister.defaultExpectation == nil {
		mmRegister.defaultExpectation = &UserRepositoryMockRegisterExpectation{mock: mmRegister.mock}
	}
	mmRegister.defaultExpectation.results = &UserRepositoryMockRegisterResults{i1, err}
	mmRegister.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRegister.mock
}

// Set uses given function f to mock the UserRepository.Register method
func (mmRegister *mUserRepositoryMockRegister) Set(f func(ctx context.Context, user *domain.UserInfo) (i1 int64, err error)) *UserRepositoryMock {
	if mmRegister.defaultExpectation != nil {
		mmRegister.mock.t.Fatalf("Default expectation is already set for the UserRepository.Register method")
	}

	if len(mmRegister.expectations) > 0 {
		mmRegister.mock.t.Fatalf("Some expectations are already set for the UserRepository.Register method")
	}

	mmRegister.mock.funcRegister = f
	mmRegister.mock.funcRegisterOrigin = minimock.CallerInfo(1)
	return mmRegister.mock
}

// When sets expectation for the UserRepository.Register which will trigger the result defined by the following
// Then helper
func (mmRegister *mUserRepositoryMockRegister) When(ctx context.Context, user *domain.UserInfo) *UserRepositoryMockRegisterExpectation {
	if mmRegister.mock.funcRegister != nil {
		mmRegister.mock.t.Fatalf("UserRepositoryMock.Register mock is already set by Set")
	}

	expectation := &UserRepositoryMockRegisterExpectation{
		mock:               mmRegister.mock,
		params:             &UserRepositoryMockRegisterParams{ctx, user},
		expectationOrigins: UserRepositoryMockRegisterExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmRegister.expectations = append(mmRegister.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.Register return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockRegisterExpectation) Then(i1 int64, err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockRegisterResults{i1, err}
	return e.mock
}

// Times sets number of times UserRepository.Register should be invoked
func (mmRegister *mUserRepositoryMockRegister) Times(n uint64) *mUserRepositoryMockRegister {
	if n == 0 {
		mmRegister.mock.t.Fatalf("Times of UserRepositoryMock.Register mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRegister.expectedInvocations, n)
	mmRegister.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRegister
}

func (mmRegister *mUserRepositoryMockRegister) invocationsDone() bool {
	if len(mmRegister.expectations) == 0 && mmRegister.defaultExpectation == nil && mmRegister.mock.funcRegister == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRegister.mock.afterRegisterCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRegister.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Register implements mm_repository.UserRepository
func (mmRegister *UserRepositoryMock) Register(ctx context.Context, user *domain.UserInfo) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmRegister.beforeRegisterCounter, 1)
	defer mm_atomic.AddUint64(&mmRegister.afterRegisterCounter, 1)

	mmRegister.t.Helper()

	if mmRegister.inspectFuncRegister != nil {
		mmRegister.inspectFuncRegister(ctx, user)
	}

	mm_params := UserRepositoryMockRegisterParams{ctx, user}

	// Record call args
	mmRegister.RegisterMock.mutex.Lock()
	mmRegister.RegisterMock.callArgs = append(mmRegister.RegisterMock.callArgs, &mm_params)
	mmRegister.RegisterMock.mutex.Unlock()

	for _, e := range mmRegister.RegisterMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmRegister.RegisterMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRegister.RegisterMock.defaultExpectation.Counter, 1)
		mm_want := mmRegister.RegisterMock.defaultExpectation.params
		mm_want_ptrs := mmRegister.RegisterMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockRegisterParams{ctx, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmRegister.t.Errorf("UserRepositoryMock.Register got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRegister.RegisterMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmRegister.t.Errorf("UserRepositoryMock.Register got unexpected parameter user, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRegister.RegisterMock.defaultExpectation.expectationOrigins.originUser, *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRegister.t.Errorf("UserRepositoryMock.Register got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmRegister.RegisterMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRegister.RegisterMock.defaultExpectation.results
		if mm_results == nil {
			mmRegister.t.Fatal("No results are set for the UserRepositoryMock.Register")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmRegister.funcRegister != nil {
		return mmRegister.funcRegister(ctx, user)
	}
	mmRegister.t.Fatalf("Unexpected call to UserRepositoryMock.Register. %v %v", ctx, user)
	return
}

// RegisterAfterCounter returns a count of finished UserRepositoryMock.Register invocations
func (mmRegister *UserRepositoryMock) RegisterAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRegister.afterRegisterCounter)
}

// RegisterBeforeCounter returns a count of UserRepositoryMock.Register invocations
func (mmRegister *UserRepositoryMock) RegisterBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRegister.beforeRegisterCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.Register.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRegister *mUserRepositoryMockRegister) Calls() []*UserRepositoryMockRegisterParams {
	mmRegister.mutex.RLock()

	argCopy := make([]*UserRepositoryMockRegisterParams, len(mmRegister.callArgs))
	copy(argCopy, mmRegister.callArgs)

	mmRegister.mutex.RUnlock()

	return argCopy
}

// MinimockRegisterDone returns true if the count of the Register invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockRegisterDone() bool {
	if m.RegisterMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RegisterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RegisterMock.invocationsDone()
}

// MinimockRegisterInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockRegisterInspect() {
	for _, e := range m.RegisterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.Register at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterRegisterCounter := mm_atomic.LoadUint64(&m.afterRegisterCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RegisterMock.defaultExpectation != nil && afterRegisterCounter < 1 {
		if m.RegisterMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserRepositoryMock.Register at\n%s", m.RegisterMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.Register at\n%s with params: %#v", m.RegisterMock.defaultExpectation.expectationOrigins.origin, *m.RegisterMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRegister != nil && afterRegisterCounter < 1 {
		m.t.Errorf("Expected call to UserRepositoryMock.Register at\n%s", m.funcRegisterOrigin)
	}

	if !m.RegisterMock.invocationsDone() && afterRegisterCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.Register at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RegisterMock.expectedInvocations), m.RegisterMock.expectedInvocationsOrigin, afterRegisterCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetUserInspect()

			m.MinimockRegisterInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetUserDone() &&
		m.MinimockRegisterDone()
}
